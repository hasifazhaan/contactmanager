{"version":3,"sources":["contact_manager/del_to.js","contact_manager/heading.js","contact_manager/add_to.js","contact_manager/details.js","contact_manager/con_det.js","contact_manager/show.js","contact_manager/button.js","App.js","serviceWorker.js","index.js"],"names":["func","Heading","className","data","Add_to","props","handlenamechange","event","setState","name","target","value","handlecomchange","company","handlenumchange","number","handleemailchange","email","handelsubmit","state","insertion","fcn","type","this","onChange","required","onClick","Component","Details","database","shift","Del_to","click","h","Con_det","ind","val","show","index","window","confirm","splice","contact","Show","call","length","x","push","key","alert","Button","handleSubmit","mthd","change","bool","bind","React","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f0ebe355.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {database} from '../App.js'\r\nimport Show from './show.js'\r\nlet func;\r\nclass Del_to extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             click:false\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                Select the Contact To delete\r\n               <Show  h=\"del\"/>\r\n                {func=this.props.fcn}\r\n               \r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\nconst del =(val)=>{\r\nif(window.confirm(\"sure wanna delete \")){\r\n   if(val>-1){ database.splice(val,1) }\r\n   func(false)\r\n}\r\n}\r\n\r\nexport default Del_to\r\nexport{del}\r\n","import React from'react'\r\nimport './css/heading.css'\r\n\r\nconst Heading = ()=>{\r\n    return(\r\n        <div>\r\n            <p className = 'heading'>Contact Manager</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Heading","import React, { Component } from 'react'\r\nimport { insertion } from '../App'\r\nlet data ={}\r\n\r\nclass Add_to extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             name:'',\r\n             company:'',\r\n             number:'',\r\n             email:''\r\n        }\r\n    }\r\n    handlenamechange =(event)=>{\r\n        this.setState({\r\n            name:event.target.value\r\n        })   \r\n    }\r\n    handlecomchange =(event)=>{\r\n        this.setState({\r\n            company:event.target.value\r\n        })   \r\n    }\r\n    handlenumchange =(event)=>{\r\n        this.setState({\r\n            number:event.target.value\r\n        })   \r\n    }\r\n    handleemailchange =(event)=>{\r\n        this.setState({\r\n            email:event.target.value\r\n        })   \r\n    }\r\n    handelsubmit =(event)=>{\r\n        data=this.state\r\n        this.setState({\r\n            name:\"\",\r\n            company:\"\",\r\n            email:\"\",\r\n            number:\"\"\r\n            \r\n        })\r\n        //calling to store data in app.js\r\n        insertion(data)\r\n        this.props.fcn(false)\r\n    }\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <div>\r\n                <div >\r\n                    \r\n                    <div>\r\n                        <label className='names'>Name </label>\r\n                        <input type='text'value={this.state.name} onChange={this.handlenamechange} required=\"\"></input>\r\n                    </div>\r\n                    <div>\r\n                        <label className='names'>Company Name </label>\r\n                        <input type='text' value={this.state.company} onChange={this.handlecomchange}></input>\r\n                    </div>\r\n                    <div>\r\n                        <label className='names'>Phone Number </label>\r\n                        <input type='tel'value={this.state.number} onChange={this.handlenumchange}></input>\r\n                    </div>\r\n                    <div>\r\n                        <label className='names'>Email Address </label>\r\n                        <input type='Email' value={this.state.email} onChange={this.handleemailchange}></input>\r\n                    </div>\r\n                    \r\n                    <input type=\"submit\"  value=\"Submit\" className =\"sub\" onClick={this.handelsubmit}></input>\r\n\r\n                </div>\r\n             \r\n             </div>\r\n           \r\n        )\r\n    }\r\n\r\n\r\n    \r\n}\r\nexport  {Add_to};\r\n\r\n","import React, { Component } from 'react'\r\nimport {shift} from './con_det'\r\n\r\n class Details extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"allinfo\">\r\n                    <label className=\"dataname\"> {(this.props.database).name}</label>\r\n                    <label className=\"datanumber\">Phone Number :{(this.props.database).number} </label>\r\n                    <label className=\"datacompany\">Company Name :{(this.props.database).company}  </label>\r\n                    <label className=\"dataemail\"> Email Id :{(this.props.database).email} </label>\r\n                    <button  className=\"close\" onClick={()=>shift}>X</button>\r\n               </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Details\r\n","import React, { Component } from 'react'\r\nimport Details from './details'\r\nimport {del} from './del_to'\r\n class Con_det extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             show:false\r\n        }\r\n    }\r\n    \r\n    ind=this.props.val\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <div className={this.props.className} onClick={()=>{\r\n                this.props.index==='del' ? del(this.ind) :\r\n                this.setState({show:!(this.state.show)})}}>\r\n                {this.props.name}\r\n                {this.state.show ? <Details database={this.props.database}/> :<div></div>}\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\nconst shift =()=>{\r\n    this.setState({show:!(this.state.show)})\r\n\r\n}\r\n\r\nexport default Con_det\r\nexport {shift}\r\n","import React, { Component } from 'react'\r\nimport {database} from '../App.js' \r\nimport Con_det from './con_det.js'\r\n\r\nlet contact=[]; \r\n\r\nclass Show extends Component \r\n{\r\n\r\n    number=this.props.h;\r\n\r\n    \r\n    call = ()=>\r\n    {\r\n        contact.length=0;\r\n        for (var x=0; x<database.length;x++)\r\n        {\r\n            contact.push(<Con_det name={database[x].name} className=\"cont_name\" val={x} key={x} index={this.number} database={database[x]} />)\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"contact\">\r\n                {database.length === 0 ? alert(\"No Contact Available\") :'\\n' }\r\n               {this.call()}\r\n               {contact}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Show\r\nexport {contact}\r\n\r\n","import React, { Component } from 'react'\r\nimport {Add_to} from './add_to.js'\r\nimport Show from './show.js'\r\nimport Del_to from './del_to.js'\r\n\r\n\r\nclass Button extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            //to click or not to click\r\n            click:false,\r\n            mthd:<Add_to fcn={this.change}/>\r\n        }\r\n        this.change =this.change.bind(this);\r\n    }\r\n    \r\nhandleSubmit = (event)=>{\r\n    if(this.props.fcn==='del'){\r\n        this.setState({ mthd:<Del_to fcn={this.change} />})\r\n    }\r\n    else if(this.props.fcn==='show'){\r\n        this.setState({ mthd:<Show />})\r\n    }\r\n    \r\n}    \r\n\r\nchange = (bool)=>{\r\n    this.setState({ click:bool})\r\n}\r\n    render() {\r\n        return (\r\n            <div onClick={this.handleSubmit}>\r\n                <button className={this.props.className} \r\n                onClick={()=>{\r\n                    this.state.click ? this.change(false) : this.change(true) \r\n                }}>\r\n                    {this.props.name}\r\n                </button>\r\n                { this.state.click?  this.state.mthd : <div></div> }\r\n                \r\n            </div>\r\n        )\r\n    }      \r\n}\r\n\r\n\r\nexport default Button\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Heading from './contact_manager/heading.js'\nimport Button from './contact_manager/button.js'\nimport './contact_manager/css/details.css'\n\nvar database =[]\n//creating to store details\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      \n        \n        <div className='app_par'>\n        <Heading /> \n        <Button  className=\"btn\" name=\"Add to Contact\"  fcn =\"add\"/>\n        <Button  className=\"btn\" name=\"Delete Contact\"  fcn =\"del\"/>\n        <Button  className=\"btn\" name=\"Display All Contact\"  fcn =\"show\"/>\n\n        </div>\n      \n      \n    </div>\n  );\n}\nexport default App;\n//process of storing data using function insertion\nconst insertion = (data)=>{\n  alert(\"Recorded\")\n  database.push(data)\n  }\n\n  export {insertion}\n  export{database}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}